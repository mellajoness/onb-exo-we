{"ast":null,"code":"import axios from 'axios';\nimport { del, get, post, put } from \"./api_helper\";\nimport * as url from \"./url_helper\"; // Gets the logged in user data from local session \n\nconst getLoggedInUser = () => {\n  const user = localStorage.getItem('authUser');\n  if (user) return JSON.parse(user);\n  return null;\n}; //is user is logged in\n\n\nconst isUserAuthenticated = () => {\n  return getLoggedInUser() !== null;\n}; // Register Method\n\n\nconst postRegister = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status >= 200 || response.status <= 299) return response.data;\n    throw response.data;\n  }).catch(err => {\n    var message;\n\n    if (err.response && err.response.status) {\n      switch (err.response.status) {\n        case 404:\n          message = \"Sorry! the page you are looking for could not be found\";\n          break;\n\n        case 500:\n          message = \"Sorry! something went wrong, please contact our support team\";\n          break;\n\n        case 401:\n          message = \"Invalid credentials\";\n          break;\n\n        default:\n          message = err[1];\n          break;\n      }\n    }\n\n    throw message;\n  });\n}; // Login Method\n\n\nconst postLogin = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status === 400 || response.status === 500) throw response.data;\n    return response.data;\n  }).catch(err => {\n    throw err[1];\n  });\n}; // postForgetPwd \n\n\nconst postForgetPwd = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status === 400 || response.status === 500) throw response.data;\n    return response.data;\n  }).catch(err => {\n    throw err[1];\n  });\n}; // get Events\n\n\nexport const getEvents = () => get(url.GET_EVENTS); // add Events\n\nexport const addNewEvent = event => post(url.ADD_NEW_EVENT, event); // update Event\n\nexport const updateEvent = event => put(url.UPDATE_EVENT, event); // delete Event\n\nexport const deleteEvent = event => del(url.DELETE_EVENT, {\n  headers: {\n    event\n  }\n}); // get Categories\n\nexport const getCategories = () => get(url.GET_CATEGORIES); // get Products\n\nexport const getProducts = () => get(url.GET_PRODUCTS); // get Product detail\n\nexport const getProductDetail = id => get(`${url.GET_PRODUCTS_DETAIL}/${id}`, {\n  params: {\n    id\n  }\n}); // get orders\n\nexport const getOrders = () => get(url.GET_ORDERS); // add order\n\nexport const addNewOrder = order => post(url.ADD_NEW_ORDER, order); // update order\n\nexport const updateOrder = order => put(url.UPDATE_ORDER, order); // delete order\n\nexport const deleteOrder = order => del(url.DELETE_ORDER, {\n  headers: {\n    order\n  }\n}); // get cart data\n\nexport const getCartData = () => get(url.GET_CART_DATA); // get customers\n\nexport const getCustomers = () => get(url.GET_CUSTOMERS); // get shops\n\nexport const getShops = () => get(url.GET_SHOPS); // get chats\n\nexport const getChats = () => get(url.GET_CHATS); // get groups\n\nexport const getGroups = () => get(url.GET_GROUPS); // get Contacts\n\nexport const getContacts = () => get(url.GET_CONTACTS); // get messages\n\nexport const getMessages = (roomId = \"\") => get(`${url.GET_MESSAGES}/${roomId}`, {\n  params: {\n    roomId\n  }\n}); // post messages\n\nexport const addMessage = message => post(url.ADD_MESSAGE, message);\nexport { getLoggedInUser, isUserAuthenticated, postRegister, postLogin, postForgetPwd };","map":{"version":3,"sources":["C:/Users/User/Documents/React Js/ONB/src/helpers/fackBackend_Helper.js"],"names":["axios","del","get","post","put","url","getLoggedInUser","user","localStorage","getItem","JSON","parse","isUserAuthenticated","postRegister","data","then","response","status","catch","err","message","postLogin","postForgetPwd","getEvents","GET_EVENTS","addNewEvent","event","ADD_NEW_EVENT","updateEvent","UPDATE_EVENT","deleteEvent","DELETE_EVENT","headers","getCategories","GET_CATEGORIES","getProducts","GET_PRODUCTS","getProductDetail","id","GET_PRODUCTS_DETAIL","params","getOrders","GET_ORDERS","addNewOrder","order","ADD_NEW_ORDER","updateOrder","UPDATE_ORDER","deleteOrder","DELETE_ORDER","getCartData","GET_CART_DATA","getCustomers","GET_CUSTOMERS","getShops","GET_SHOPS","getChats","GET_CHATS","getGroups","GET_GROUPS","getContacts","GET_CONTACTS","getMessages","roomId","GET_MESSAGES","addMessage","ADD_MESSAGE"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { del, get, post, put } from \"./api_helper\";\r\nimport * as url from \"./url_helper\"\r\n\r\n// Gets the logged in user data from local session \r\nconst getLoggedInUser = () => {\r\n    const user = localStorage.getItem('authUser');\r\n    if (user)\r\n        return JSON.parse(user);\r\n    return null;\r\n}\r\n\r\n//is user is logged in\r\nconst isUserAuthenticated = () => {\r\n    return getLoggedInUser() !== null;\r\n}\r\n\r\n// Register Method\r\nconst postRegister = (url, data) => {\r\n    return axios.post(url, data).then(response => {\r\n        if (response.status >= 200 || response.status <= 299)\r\n            return response.data;\r\n        throw response.data;\r\n    }).catch(err => {\r\n        var message;\r\n        if (err.response && err.response.status) {\r\n            switch (err.response.status) {\r\n                case 404: message = \"Sorry! the page you are looking for could not be found\"; break;\r\n                case 500: message = \"Sorry! something went wrong, please contact our support team\"; break;\r\n                case 401: message = \"Invalid credentials\"; break;\r\n                default: message = err[1]; break;\r\n            }\r\n        }\r\n        throw message;\r\n    });\r\n\r\n}\r\n\r\n// Login Method\r\nconst postLogin = (url, data) => {\r\n    return axios.post(url, data).then(response => {\r\n        if (response.status === 400 || response.status === 500)\r\n            throw response.data;\r\n        return response.data;\r\n    }).catch(err => {\r\n        throw err[1];\r\n    });\r\n}\r\n\r\n// postForgetPwd \r\nconst postForgetPwd = (url, data) => {\r\n    return axios.post(url, data).then(response => {\r\n        if (response.status === 400 || response.status === 500)\r\n            throw response.data;\r\n        return response.data;\r\n    }).catch(err => {\r\n        throw err[1];\r\n    });\r\n}\r\n// get Events\r\nexport const getEvents = () =>\r\n    get(url.GET_EVENTS)\r\n\r\n// add Events\r\nexport const addNewEvent = event => post(url.ADD_NEW_EVENT, event)\r\n\r\n// update Event\r\nexport const updateEvent = event => put(url.UPDATE_EVENT, event)\r\n\r\n// delete Event\r\nexport const deleteEvent = event =>\r\n    del(url.DELETE_EVENT, { headers: { event } })\r\n\r\n// get Categories\r\nexport const getCategories = () => get(url.GET_CATEGORIES)\r\n\r\n// get Products\r\nexport const getProducts = () => get(url.GET_PRODUCTS)\r\n\r\n// get Product detail\r\nexport const getProductDetail = id =>\r\n  get(`${url.GET_PRODUCTS_DETAIL}/${id}`, { params: { id } })\r\n\r\n// get orders\r\nexport const getOrders = () => get(url.GET_ORDERS)\r\n\r\n// add order\r\nexport const addNewOrder = order => post(url.ADD_NEW_ORDER, order)\r\n\r\n// update order\r\nexport const updateOrder = order => put(url.UPDATE_ORDER, order)\r\n\r\n// delete order\r\nexport const deleteOrder = order =>\r\n  del(url.DELETE_ORDER, { headers: { order } })\r\n\r\n// get cart data\r\nexport const getCartData = () => get(url.GET_CART_DATA)\r\n\r\n// get customers\r\nexport const getCustomers = () => get(url.GET_CUSTOMERS)\r\n\r\n// get shops\r\nexport const getShops = () => get(url.GET_SHOPS)\r\n\r\n// get chats\r\nexport const getChats = () => get(url.GET_CHATS)\r\n\r\n// get groups\r\nexport const getGroups = () => get(url.GET_GROUPS)\r\n\r\n// get Contacts\r\nexport const getContacts = () => get(url.GET_CONTACTS)\r\n\r\n// get messages\r\nexport const getMessages = (roomId = \"\") =>\r\n  get(`${url.GET_MESSAGES}/${roomId}`, { params: { roomId } })\r\n\r\n// post messages\r\nexport const addMessage = message => post(url.ADD_MESSAGE, message)\r\n\r\nexport { getLoggedInUser, isUserAuthenticated, postRegister, postLogin, postForgetPwd }"]},"metadata":{},"sourceType":"module"}