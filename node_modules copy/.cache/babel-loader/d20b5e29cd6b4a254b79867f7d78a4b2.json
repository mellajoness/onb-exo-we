{"ast":null,"code":"import { GET_EVENTS_SUCCESS, GET_EVENTS_FAIL, ADD_EVENT_SUCCESS, ADD_EVENT_FAIL, UPDATE_EVENT_SUCCESS, UPDATE_EVENT_FAIL, DELETE_EVENT_SUCCESS, DELETE_EVENT_FAIL, GET_CATEGORIES_SUCCESS, GET_CATEGORIES_FAIL } from \"./actionTypes\";\nconst INIT_STATE = {\n  events: [],\n  categories: [],\n  error: {}\n};\n\nconst Calendar = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_EVENTS_SUCCESS:\n      console.log('testtttttt');\n      return { ...state,\n        events: action.payload\n      };\n\n    case GET_EVENTS_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case ADD_EVENT_SUCCESS:\n      return { ...state,\n        events: [...state.events, action.payload]\n      };\n\n    case ADD_EVENT_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case UPDATE_EVENT_SUCCESS:\n      return { ...state,\n        events: state.events.map(event => event.id.toString() === action.payload.id.toString() ? {\n          event,\n          ...action.payload\n        } : event)\n      };\n\n    case UPDATE_EVENT_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case DELETE_EVENT_SUCCESS:\n      return { ...state,\n        events: state.events.filter(event => event.id.toString() !== action.payload.id.toString())\n      };\n\n    case DELETE_EVENT_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case GET_CATEGORIES_SUCCESS:\n      return { ...state,\n        categories: action.payload\n      };\n\n    case GET_CATEGORIES_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["C:/Users/User/Documents/React Js/ONB/src/store/calendar/reducer.js"],"names":["GET_EVENTS_SUCCESS","GET_EVENTS_FAIL","ADD_EVENT_SUCCESS","ADD_EVENT_FAIL","UPDATE_EVENT_SUCCESS","UPDATE_EVENT_FAIL","DELETE_EVENT_SUCCESS","DELETE_EVENT_FAIL","GET_CATEGORIES_SUCCESS","GET_CATEGORIES_FAIL","INIT_STATE","events","categories","error","Calendar","state","action","type","console","log","payload","map","event","id","toString","filter"],"mappings":"AAAA,SACEA,kBADF,EAEEC,eAFF,EAGEC,iBAHF,EAIEC,cAJF,EAKEC,oBALF,EAMEC,iBANF,EAOEC,oBAPF,EAQEC,iBARF,EASEC,sBATF,EAUEC,mBAVF,QAWO,eAXP;AAaA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,UAAU,EAAE,EAFK;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAAnB;;AAMA,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGL,UAAT,EAAqBM,MAArB,KAAgC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKjB,kBAAL;AACEkB,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,aAAO,EACL,GAAGJ,KADE;AAELJ,QAAAA,MAAM,EAAEK,MAAM,CAACI;AAFV,OAAP;;AAKF,SAAKnB,eAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACI;AAFT,OAAP;;AAKF,SAAKlB,iBAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELJ,QAAAA,MAAM,EAAE,CAAC,GAAGI,KAAK,CAACJ,MAAV,EAAkBK,MAAM,CAACI,OAAzB;AAFH,OAAP;;AAKF,SAAKjB,cAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACI;AAFT,OAAP;;AAKF,SAAKhB,oBAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELJ,QAAAA,MAAM,EAAEI,KAAK,CAACJ,MAAN,CAAaU,GAAb,CAAiBC,KAAK,IAC5BA,KAAK,CAACC,EAAN,CAASC,QAAT,OAAwBR,MAAM,CAACI,OAAP,CAAeG,EAAf,CAAkBC,QAAlB,EAAxB,GACI;AAAEF,UAAAA,KAAF;AAAS,aAAGN,MAAM,CAACI;AAAnB,SADJ,GAEIE,KAHE;AAFH,OAAP;;AASF,SAAKjB,iBAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACI;AAFT,OAAP;;AAKF,SAAKd,oBAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELJ,QAAAA,MAAM,EAAEI,KAAK,CAACJ,MAAN,CAAac,MAAb,CACNH,KAAK,IAAIA,KAAK,CAACC,EAAN,CAASC,QAAT,OAAwBR,MAAM,CAACI,OAAP,CAAeG,EAAf,CAAkBC,QAAlB,EAD3B;AAFH,OAAP;;AAOF,SAAKjB,iBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACI;AAFT,OAAP;;AAKF,SAAKZ,sBAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELH,QAAAA,UAAU,EAAEI,MAAM,CAACI;AAFd,OAAP;;AAKF,SAAKX,mBAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACI;AAFT,OAAP;;AAIF;AACE,aAAOL,KAAP;AApEJ;AAsED,CAvED;;KAAMD,Q;AAyEN,eAAeA,QAAf","sourcesContent":["import {\n  GET_EVENTS_SUCCESS,\n  GET_EVENTS_FAIL,\n  ADD_EVENT_SUCCESS,\n  ADD_EVENT_FAIL,\n  UPDATE_EVENT_SUCCESS,\n  UPDATE_EVENT_FAIL,\n  DELETE_EVENT_SUCCESS,\n  DELETE_EVENT_FAIL,\n  GET_CATEGORIES_SUCCESS,\n  GET_CATEGORIES_FAIL,\n} from \"./actionTypes\"\n\nconst INIT_STATE = {\n  events: [],\n  categories: [],\n  error: {},\n}\n\nconst Calendar = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_EVENTS_SUCCESS:\n      console.log('testtttttt')\n      return {\n        ...state,\n        events: action.payload,\n      }\n\n    case GET_EVENTS_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case ADD_EVENT_SUCCESS:\n      return {\n        ...state,\n        events: [...state.events, action.payload],\n      }\n\n    case ADD_EVENT_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case UPDATE_EVENT_SUCCESS:\n      return {\n        ...state,\n        events: state.events.map(event =>\n          event.id.toString() === action.payload.id.toString()\n            ? { event, ...action.payload }\n            : event\n        ),\n      }\n\n    case UPDATE_EVENT_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case DELETE_EVENT_SUCCESS:\n      return {\n        ...state,\n        events: state.events.filter(\n          event => event.id.toString() !== action.payload.id.toString()\n        ),\n      }\n\n    case DELETE_EVENT_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case GET_CATEGORIES_SUCCESS:\n      return {\n        ...state,\n        categories: action.payload,\n      }\n\n    case GET_CATEGORIES_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n    default:\n      return state\n  }\n}\n\nexport default Calendar\n"]},"metadata":{},"sourceType":"module"}