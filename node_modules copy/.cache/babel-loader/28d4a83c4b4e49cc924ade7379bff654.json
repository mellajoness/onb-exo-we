{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\React Js\\\\ONB\\\\src\\\\pages\\\\Charts\\\\barchat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactApexChart from 'react-apexcharts';\nimport styles from \"./css/barchat.module.css\";\nimport { ReactComponent as LineIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/images/lineicon.svg\";\nimport { ReactComponent as ChartIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/images/charticon.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BarChart = () => {\n  _s();\n\n  const [showLine, setShowline] = useState(false);\n  const [showBar, setShowBar] = useState(true);\n  const [series, setSeries] = useState([{\n    name: 'Inflow',\n    data: [46, 57, 59, 54, 62, 58, 64, 60, 66, 56, 45, 56]\n  }, {\n    name: 'Outflow',\n    data: [74, 83, 102, 97, 86, 106, 93, 114, 94, 68, 78, 88]\n  }]);\n  const [options, setOptions] = useState({\n    chart: {\n      toolbar: {\n        show: false\n      }\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        columnWidth: '45%',\n        endingShape: 'rounded'\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    // fill: {\n    //     type: \"gradient\",\n    //     gradient: {\n    //       shadeIntensity: 1,\n    //       opacityFrom: 0,\n    //       opacityTo: 100,\n    //       stops: [0, 100]\n    //     }\n    //   },\n    //   grid:{\n    //     yaxis: {\n    //       lines: {\n    //           show: false\n    //       }\n    //   }, xaxis: {\n    //     lines: {\n    //         show: true\n    //     }\n    // }\n    //   },\n    legend: {\n      show: false,\n      showForSingleSeries: false,\n      showForNullSeries: true,\n      showForZeroSeries: true,\n      position: 'bottom',\n      horizontalAlign: 'center',\n      floating: false,\n      fontSize: '14px',\n      fontFamily: 'Helvetica, Arial',\n      fontWeight: 400,\n      formatter: undefined,\n      inverseOrder: false,\n      width: undefined,\n      height: undefined,\n      tooltipHoverFormatter: undefined,\n      customLegendItems: [],\n      offsetX: 0,\n      offsetY: 0\n    },\n    stroke: {\n      show: true,\n      width: 2,\n      colors: ['transparent']\n    },\n    colors: ['#15c15d', '#ff0000'],\n    xaxis: {\n      categories: [\"Jan\", 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', \"Nov\", \"Dec\"]\n    },\n    grid: {\n      borderColor: '#f1f1f1'\n    },\n    fill: {\n      opacity: 1\n    },\n    tooltip: {\n      y: {\n        formatter: function (val) {\n          return \"â‚¦\" + val + \" thousands\";\n        }\n      }\n    }\n  });\n  const [lineseries, setLineSeries] = useState([{\n    name: \"Inflow\",\n    data: [100, 234, 322, 436, 355, 235, 343, 423, 343, 355, 123, 53]\n  }, {\n    name: \"Outflow\",\n    data: [30, 74, 8, 200, 292, 105, 243, 123, 243, 155, 193, 93]\n  }]);\n  const [lineoptions, setLineOptions] = useState({\n    chart: {\n      type: 'line',\n      zoom: {\n        enabled: false\n      },\n      toolbar: {\n        show: false\n      }\n    },\n    colors: ['#15c15d', '#ff0000'],\n    dataLabels: {\n      enabled: false\n    },\n    //  stroke: {\n    //     curve: 'smooth',\n    //   },\n    stroke: {\n      width: [\".9\"],\n      curve: 'smooth',\n      dashArray: [0]\n    },\n    legend: {// tooltipHoverFormatter: function(val, opts) {\n      //   return val + ' - ' + opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] + ''\n      // }\n    },\n    markers: {\n      size: 0,\n      hover: {\n        size: 0\n      }\n    },\n    xaxis: {\n      categories: [\"Jan\", 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', \"Nov\", \"Dec\"]\n    },\n    tooltip: {\n      y: [{\n        title: {\n          formatter: function (val) {\n            return val;\n          }\n        }\n      }]\n    }\n  });\n\n  const showLineChart = () => {\n    setShowline(true);\n\n    if (showLine === true) {\n      setShowBar(false);\n    }\n  };\n\n  const showBarChart = () => {\n    setShowBar(true);\n\n    if (showBar === true) {\n      setShowline(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"bar-chart\",\n      className: \"apex-charts\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.graphRow,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.monthly,\n          children: \"Monthly Overview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.a,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.descContent,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.descParent,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.descBox\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 31\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.income,\n                children: \"Income\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 31\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 28\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.descParentTwo,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.descBoxTwo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 31\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.income,\n                children: \"Outflow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 31\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 28\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(LineIcon, {\n            onClick: showLineChart,\n            height: \"19\",\n            width: \"19\",\n            cursor: \"pointer\",\n            className: styles.lineMagin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(ChartIcon, {\n            onClick: showBarChart,\n            height: \"19\",\n            width: \"19\",\n            cursor: \"pointer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 20\n      }, this), showBar === true && showLine == false && /*#__PURE__*/_jsxDEV(ReactApexChart, {\n        options: options,\n        series: series,\n        type: \"bar\",\n        height: \"170px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 22\n      }, this), showLine === true && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ReactApexChart, {\n          options: lineoptions,\n          series: lineseries,\n          type: \"area\",\n          height: \"170px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 13\n  }, this);\n};\n\n_s(BarChart, \"h1pXYXfmLt4Jp+taG6pLwHGkv4w=\");\n\n_c = BarChart;\nexport default BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"sources":["C:/Users/User/Documents/React Js/ONB/src/pages/Charts/barchat.js"],"names":["React","useState","ReactApexChart","styles","BarChart","showLine","setShowline","showBar","setShowBar","series","setSeries","name","data","options","setOptions","chart","toolbar","show","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","legend","showForSingleSeries","showForNullSeries","showForZeroSeries","position","horizontalAlign","floating","fontSize","fontFamily","fontWeight","formatter","undefined","inverseOrder","width","height","tooltipHoverFormatter","customLegendItems","offsetX","offsetY","stroke","colors","xaxis","categories","grid","borderColor","fill","opacity","tooltip","y","val","lineseries","setLineSeries","lineoptions","setLineOptions","type","zoom","curve","dashArray","markers","size","hover","title","showLineChart","showBarChart","graphRow","monthly","a","descContent","descParent","descBox","income","descParentTwo","descBoxTwo","lineMagin"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport styles from \"./css/barchat.module.css\";\r\nimport {ReactComponent as LineIcon} from \"../../assets/images/lineicon.svg\";\r\nimport {ReactComponent as ChartIcon} from \"../../assets/images/charticon.svg\";\r\nconst BarChart=()=> {\r\n    const [showLine,setShowline]=useState(false);\r\n    const [showBar,setShowBar]=useState(true)\r\n    const [series,setSeries]=useState([{\r\n                name: 'Inflow',\r\n                data: [46, 57, 59, 54, 62, 58, 64, 60, 66, 56, 45, 56]\r\n            }, {\r\n                name: 'Outflow',\r\n                data: [74, 83, 102, 97, 86, 106, 93, 114, 94, 68, 78, 88]\r\n            }]);\r\n\r\n            const [options,setOptions]=useState({\r\n                chart: {\r\n                    toolbar: {\r\n                        show: false,\r\n                    }\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: false,\r\n                        columnWidth: '45%',\r\n                        endingShape: 'rounded'\t\r\n                    },\r\n                },\r\n                dataLabels: {\r\n                    enabled: false,\r\n                },\r\n                // fill: {\r\n                //     type: \"gradient\",\r\n                //     gradient: {\r\n                //       shadeIntensity: 1,\r\n                //       opacityFrom: 0,\r\n                //       opacityTo: 100,\r\n                //       stops: [0, 100]\r\n                //     }\r\n                //   },\r\n                //   grid:{\r\n                //     yaxis: {\r\n                //       lines: {\r\n                //           show: false\r\n                //       }\r\n                //   }, xaxis: {\r\n                //     lines: {\r\n                //         show: true\r\n                //     }\r\n                // }\r\n                //   },\r\n                legend: {\r\n                  show: false,\r\n                  showForSingleSeries: false,\r\n                  showForNullSeries: true,\r\n                  showForZeroSeries: true,\r\n                  position: 'bottom',\r\n                  horizontalAlign: 'center', \r\n                  floating: false,\r\n                  fontSize: '14px',\r\n                  fontFamily: 'Helvetica, Arial',\r\n                  fontWeight: 400,\r\n                  formatter: undefined,\r\n                  inverseOrder: false,\r\n                  width: undefined,\r\n                  height: undefined,\r\n                  tooltipHoverFormatter: undefined,\r\n                  customLegendItems: [],\r\n                  offsetX: 0,\r\n                  offsetY: 0,\r\n                },\r\n                stroke: {\r\n                    show: true,\r\n                    width: 2,\r\n                    colors: ['transparent']\r\n                },\r\n                \r\n                colors: ['#15c15d', '#ff0000'],\r\n                xaxis: {\r\n                    categories: [\"Jan\",'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', \"Nov\", \"Dec\"],\r\n                },\r\n                grid: {\r\n                    borderColor: '#f1f1f1',\r\n                },\r\n                fill: {\r\n                    opacity: 1\r\n            \r\n                },\r\n                tooltip: {\r\n                    y: {\r\n                        formatter: function (val) {\r\n                            return \"â‚¦\" + val + \" thousands\"\r\n                        }\r\n                    }\r\n                }\r\n            \r\n        });\r\n\r\n        const [lineseries,setLineSeries]=useState([\r\n            {\r\n               name: \"Inflow\",\r\n               data: [100, 234, 322, 436, 355, 235, 343, 423, 343, 355, 123, 53]\r\n             },\r\n             {\r\n                name: \"Outflow\",\r\n                data: [30, 74, 8, 200, 292, 105, 243, 123, 243, 155, 193, 93]\r\n              }\r\n           ]);\r\n \r\n          const [lineoptions,setLineOptions]=useState({\r\n             chart: {\r\n               type: 'line',\r\n               zoom: {\r\n                 enabled: false\r\n               },\r\n               toolbar: {\r\n                 show: false,\r\n               }\r\n             },\r\n             colors: ['#15c15d', '#ff0000'],\r\n             dataLabels: {\r\n                 enabled: false\r\n             },\r\n            //  stroke: {\r\n            //     curve: 'smooth',\r\n            //   },\r\n             stroke: {\r\n               width: [\".9\"],\r\n               curve: 'smooth',\r\n               dashArray: [0]\r\n             },\r\n             legend: {\r\n               // tooltipHoverFormatter: function(val, opts) {\r\n               //   return val + ' - ' + opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] + ''\r\n               // }\r\n             },\r\n             markers: {\r\n               size: 0,\r\n               hover: {\r\n                 size: 0,\r\n               }\r\n             },\r\n             xaxis: {\r\n                categories: [\"Jan\",'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', \"Nov\", \"Dec\"],\r\n             },\r\n             tooltip: {\r\n               y: [\r\n                 {\r\n                   title: {\r\n                     formatter: function (val) {\r\n                       return val;\r\n                     }\r\n                   }\r\n                 }\r\n               ]\r\n             }\r\n           });    \r\n    \r\n    const showLineChart=()=>{\r\n      setShowline(true)\r\n     if(showLine===true){\r\n       setShowBar(false)\r\n     }\r\n    }    \r\n\r\n    const showBarChart=()=>{\r\n      setShowBar(true)\r\n      if(showBar===true){\r\n      setShowline(false)\r\n      }\r\n    }\r\n  \r\n        return (\r\n            <React.Fragment>\r\n                <div id=\"bar-chart\" className=\"apex-charts\">\r\n                   <div className={styles.graphRow}>\r\n                    \r\n                      <div className={styles.monthly}>Monthly Overview</div>\r\n                     \r\n                      \r\n                        \r\n                       <div className={styles.a}> \r\n                          <div className={styles.descContent}>\r\n                           <div className={styles.descParent}>\r\n                              <div className={styles.descBox} />\r\n                              <div className={styles.income} >Income</div>\r\n                           </div>\r\n\r\n                           <div className={styles.descParentTwo}>\r\n                              <div className={styles.descBoxTwo} />\r\n                              <div className={styles.income} >Outflow</div>\r\n                           </div>\r\n                       </div>  \r\n                           \r\n                          <LineIcon onClick={showLineChart} height=\"19\" width=\"19\"  cursor=\"pointer\" className={styles.lineMagin}/>\r\n                          <ChartIcon onClick={showBarChart} height=\"19\" width=\"19\" cursor=\"pointer\"/>  \r\n                       </div>\r\n                    </div>\r\n                    {(showBar===true && showLine==false )&&\r\n                     <ReactApexChart options={options} series={series} type=\"bar\" height=\"170px\" />\r\n                    }\r\n                     {showLine===true &&\r\n                     <div>\r\n                      <ReactApexChart options={lineoptions} series={lineseries} type=\"area\" height=\"170px\" />\r\n                     </div>\r\n                    }\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n        }\r\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}